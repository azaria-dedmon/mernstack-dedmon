{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","title","body","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","handleChange","event","target","name","value","submit","preventDefault","payload","url","method","resetUserInput","deleteBlogPosts","delete","err","displayBlogPosts","length","map","post","index","className","key","onClick","this","onSubmit","type","placeholder","onChange","cols","rows","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mSAoIeA,G,iNA5HbC,MAAQ,CACNC,MAAO,GACPC,KAAM,GACNC,MAAO,I,EAGTC,kBAAoB,WAClB,EAAKC,e,EAGPA,YAAc,WACZC,IAAMC,IAAI,QACTC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtB,EAAKC,SAAS,CAAER,MAAOO,IACvBE,QAAQC,IAAI,6BAEbC,OAAM,WACLF,QAAQC,IAAI,kC,EAIhBE,aAAe,SAACC,GACd,IAAMC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAQF,EAAOE,MAErB,EAAKR,SAAL,eACGO,EAAOC,K,EAKZC,OAAS,SAACJ,GACRA,EAAMK,iBAEN,IAAMC,EAAU,CACdrB,MAAO,EAAKD,MAAMC,MAClBC,KAAK,EAAKF,MAAME,MAElBI,IAAM,CACJiB,IAAK,YACLC,OAAQ,OACRd,KAAMY,IAEPd,MAAK,WACJI,QAAQC,IAAI,wCACZ,EAAKY,iBACL,EAAKpB,iBAENS,OAAM,WACLF,QAAQC,IAAI,yC,EAIhBY,eAAiB,WACf,EAAKd,SAAS,CACZV,MAAO,GACPC,KAAM,M,EAKVwB,gBAAkB,WAChBpB,IAAMqB,OAAN,mBACCnB,MAAK,SAACC,GACLG,QAAQC,IAAIJ,EAASC,MACrB,EAAKL,iBAENS,OAAM,SAACc,GACNhB,QAAQC,IAAIe,EAAInB,c,EAKpBoB,iBAAmB,SAAC1B,GAClB,OAAIA,EAAM2B,OACH3B,EAAM4B,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,UAAU,OAAOC,IAAKF,GACzB,4BAAKD,EAAK/B,OACV,4BAAK+B,EAAK9B,MACV,4BAAQkC,QAAS,EAAKV,iBAAtB,cALqB,M,wEAczB,OADAd,QAAQC,IAAI,UAAWwB,KAAKrC,OAE1B,yBAAKkC,UAAU,QACb,6CACA,0BAAMI,SAAUD,KAAKjB,QACnB,yBAAKc,UAAU,cACb,2BACAK,KAAK,OACLrB,KAAK,QACLsB,YAAY,QACZrB,MAAOkB,KAAKrC,MAAMC,MAClBwC,SAAUJ,KAAKtB,gBAGjB,yBAAKmB,UAAU,cACb,8BACAhB,KAAK,OACLwB,KAAK,KACLC,KAAK,KACLH,YAAY,YACZrB,MAAOkB,KAAKrC,MAAME,KAClBuC,SAAUJ,KAAKtB,gBAGjB,2CAGF,yBAAKmB,UAAU,SACZG,KAAKR,iBAAiBQ,KAAKrC,MAAMG,a,GAvH1ByC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd7C,OAAM,SAAA8C,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.37fea0db.chunk.js","sourcesContent":["import React from 'react'; \nimport axios from 'axios';\n\nimport './App.css'\n\n\nclass App extends React.Component {\n\n  state = {\n    title: '',\n    body: '',\n    posts: []\n  }\n\n  componentDidMount = () => {\n    this.getBlogPost()\n  }\n\n  getBlogPost = () => {\n    axios.get('/api')\n    .then((response) => {\n      const data = response.data\n      this.setState({ posts: data })\n      console.log('Data has been received');\n    })\n    .catch(() => {\n      console.log('There is an internal error');\n    })\n  }\n\n  handleChange = (event) => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n\n    this.setState({\n      [name]: value\n\n    });\n  };\n\n  submit = (event) => {\n    event.preventDefault();\n    \n    const payload = {\n      title: this.state.title,\n      body:this.state.body\n    }\n    axios({\n      url: '/api/save',\n      method: 'POST',\n      data: payload\n    })\n    .then(() => {\n      console.log('The data has been sent to the server')\n      this.resetUserInput ();\n      this.getBlogPost();\n    })\n    .catch(() => {\n      console.log('There is an internal server error')\n    })\n  };\n\n  resetUserInput = () => {\n    this.setState({\n      title: '',\n      body: ''\n    })\n  }\n  \n\n  deleteBlogPosts = () => {\n    axios.delete(`/api/delete/:id`)\n    .then((response) => {\n      console.log(response.data)\n      this.getBlogPost();\n    })\n    .catch((err) => {\n      console.log(err.response)\n    })\n  }\n\n\n  displayBlogPosts = (posts) => {\n    if(!posts.length) return null\n    return posts.map((post, index) => (\n      <div className='blog' key={index}>\n        <h1>{post.title}</h1>\n        <h5>{post.body}</h5>\n        <button onClick={this.deleteBlogPosts}>delete</button>\n        </div>\n    ))\n  }\n\n  \n\n  render() {\n    console.log('State: ', this.state)\n    return (\n      <div className='main'>\n        <h1>The Blog Spot</h1>\n        <form onSubmit={this.submit}>\n          <div className='form-input'>\n            <input\n            type='text'\n            name='title'\n            placeholder='title'\n            value={this.state.title}\n            onChange={this.handleChange}\n            />\n          </div>\n          <div className='form-input'>\n            <textarea\n            name='body' \n            cols='30' \n            rows='10' \n            placeholder='text-area' \n            value={this.state.body}\n            onChange={this.handleChange}\n            />\n          </div>\n          <button>SUBMIT</button>\n        </form>\n\n        <div className='blogs'>\n          {this.displayBlogPosts(this.state.posts)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}